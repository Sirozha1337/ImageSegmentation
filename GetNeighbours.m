function [Neighbours] = GetNeighbours(DataSize, NeighboursCount)

FlatIndexes = 1:(prod(DataSize));
MaxIndex = prod(DataSize);

if numel(DataSize) == 3 && NeighboursCount == 26
    Neighbours = [ ...
                  % left neighbour
                  max(FlatIndexes - 1, 1); ...
                  % right neighbour
                  min(FlatIndexes + 1, MaxIndex); ...
                  % upper neighbour
                  max(FlatIndexes - DataSize(2), 1); ... 
                  % lower neighbour
                  min(FlatIndexes + DataSize(2), MaxIndex) ...
                  % left upper neighbour
                  max(FlatIndexes - 1 - DataSize(2), 1); ...
                  % right upper neighbour
                  max(FlatIndexes + 1 - DataSize(2), 1); ...
                  % left lower neighbour
                  min(FlatIndexes - 1 + DataSize(2), MaxIndex); ...
                  % right lower neighbour
                  min(FlatIndexes + 1 + DataSize(2), MaxIndex); ...
                  % z upper neighbour
                  max(FlatIndexes - DataSize(1) * DataSize(2), 1); ... 
                  % z upper left neighbour
                  max(FlatIndexes - DataSize(1) * DataSize(2) - 1, 1); ... 
                  % z upper right neighbour
                  max(FlatIndexes - DataSize(1) * DataSize(2) + 1, 1) ...
                  % z upper lower neighbour
                  max(FlatIndexes - DataSize(1) * DataSize(2) - DataSize(2), 1); ... 
                  % z upper upper neighbour
                  max(FlatIndexes - DataSize(1) * DataSize(2) + DataSize(2), 1) ...
                  % z upper diag left neighbour
                  max(FlatIndexes - DataSize(1) * DataSize(2) + DataSize(2) - 1, 1); ... 
                  % z upper diag right neighbour
                  max(FlatIndexes - DataSize(1) * DataSize(2) + DataSize(2) + 1, 1) ...
                  % z upper diag lower neighbour
                  max(FlatIndexes - DataSize(1) * DataSize(2) - DataSize(2) - 1, 1); ... 
                  % z upper diag upper neighbour
                  max(FlatIndexes - DataSize(1) * DataSize(2) - DataSize(2) + 1, 1) ... 
                  % z lower neighbour
                  min(FlatIndexes + DataSize(1) * DataSize(2), MaxIndex); ... 
                  % z lower left neighbour
                  min(FlatIndexes + DataSize(1) * DataSize(2) - 1, MaxIndex); ... 
                  % z lower right neighbour
                  min(FlatIndexes + DataSize(1) * DataSize(2) + 1, MaxIndex) ...
                  % z lower lower neighbour
                  min(FlatIndexes + DataSize(1) * DataSize(2) - DataSize(2), MaxIndex); ... 
                  % z lower upper neighbour
                  min(FlatIndexes + DataSize(1) * DataSize(2) + DataSize(2), MaxIndex) ...
                  % z lower diag left neighbour
                  min(FlatIndexes + DataSize(1) * DataSize(2) + DataSize(2) - 1, MaxIndex); ... 
                  % z lower diag right neighbour
                  min(FlatIndexes + DataSize(1) * DataSize(2) + DataSize(2) + 1, MaxIndex) ...
                  % z lower diag lower neighbour
                  min(FlatIndexes + DataSize(1) * DataSize(2) - DataSize(2) - 1, MaxIndex); ... 
                  % z lower diag upper neighbour
                  min(FlatIndexes + DataSize(1) * DataSize(2) - DataSize(2) + 1, MaxIndex) ];
else
    if numel(DataSize) == 3 && NeighboursCount == 6
        Neighbours = [ ...
                  % left neighbour
                  max(FlatIndexes - 1, 1); ...
                  % right neighbour
                  min(FlatIndexes + 1, MaxIndex); ...
                  % upper neighbour
                  max(FlatIndexes - DataSize(2), 1); ... 
                  % lower neighbour
                  min(FlatIndexes + DataSize(2), MaxIndex) ...
                  % z upper neighbour
                  max(FlatIndexes - DataSize(1) * DataSize(2), 1); ... 
                  % z lower neighbour
                  min(FlatIndexes + DataSize(1) * DataSize(2), MaxIndex) ];
    else
        if numel(DataSize) == 2 && NeighboursCount == 4
             Neighbours = [ ...
                  % left neighbour
                  max(FlatIndexes - 1, 1); ...
                  % right neighbour
                  min(FlatIndexes + 1, MaxIndex); ...
                  % upper neighbour
                  max(FlatIndexes - DataSize(2), 1); ... 
                  % lower neighbour
                  min(FlatIndexes + DataSize(2), MaxIndex) ];
        else
            if numel(DataSize) == 2 && NeighboursCount == 8
               Neighbours = [ ...
                  % left neighbour
                  max(FlatIndexes - 1, 1); ...
                  % right neighbour
                  min(FlatIndexes + 1, MaxIndex); ...
                  % upper neighbour
                  max(FlatIndexes - DataSize(2), 1); ... 
                  % lower neighbour
                  min(FlatIndexes + DataSize(2), MaxIndex) ...
                  % left upper neighbour
                  max(FlatIndexes - 1 - DataSize(2), 1); ...
                  % right upper neighbour
                  max(FlatIndexes + 1 - DataSize(2), 1); ...
                  % left lower neighbour
                  min(FlatIndexes - 1 + DataSize(2), MaxIndex); ...
                  % right lower neighbour
                  min(FlatIndexes + 1 + DataSize(2), MaxIndex) ];
            else
                if numel(DataSize) == 2 && NeighboursCount == 16
                   Neighbours = [ ...
                      % left neighbour
                      max(FlatIndexes - 1, 1); ...
                      % right neighbour
                      min(FlatIndexes + 1, MaxIndex); ...
                      % upper neighbour
                      max(FlatIndexes - DataSize(2), 1); ... 
                      % lower neighbour
                      min(FlatIndexes + DataSize(2), MaxIndex) ...
                      % left upper neighbour
                      max(FlatIndexes - 1 - DataSize(2), 1); ...
                      % right upper neighbour
                      max(FlatIndexes + 1 - DataSize(2), 1); ...
                      % left lower neighbour
                      min(FlatIndexes - 1 + DataSize(2), MaxIndex); ...
                      % right lower neighbour
                      min(FlatIndexes + 1 + DataSize(2), MaxIndex)
                      % left 2-neighbour
                      max(FlatIndexes - 2, 1); ...
                      % right 2-neighbour
                      min(FlatIndexes + 2, MaxIndex); ...
                      % upper 2-neighbour
                      max(FlatIndexes - 2 * DataSize(2), 1); ... 
                      % lower 2-neighbour
                      min(FlatIndexes + 2 * DataSize(2), MaxIndex) ...
                      % left 2 upper neighbour
                      max(FlatIndexes - 2 - 2 * DataSize(2), 1); ...
                      % right 2 upper neighbour
                      max(FlatIndexes + 2 - 2 * DataSize(2), 1); ...
                      % left 2 lower neighbour
                      min(FlatIndexes - 2 + 2 * DataSize(2), MaxIndex); ...
                      % right 2 lower neighbour
                      min(FlatIndexes + 2 + 2 * DataSize(2), MaxIndex) ];
                end
            end
        end
    end
end
